var searchIndex = JSON.parse('{\
"cc_fs":{"doc":"Confidential Container file-system tools.","t":[0,0,0,0,3,17,17,11,11,11,11,12,11,11,11,5,11,12,11,11,11,11,12,11,11,11,11,3,6,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,13,13,3,4,13,3,3,13,13,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,12,12,12,12,12,11,12,12,12,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,5,5,11,11,11,11,12,12,12,12,12,11,11,11,12,12,12,5,12,12,11,11,12,12,12,12,12,11,12,12,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,12,12,12,12],"n":["fs","hash","index","tar","CcFs","MAX_NAME_LENGTH","TTL","borrow","borrow_mut","from","getattr","index","inode_to_attr","into","lookup","mount","new","next_file_handle","open","read","readdir","readlink","tar","to_file_type","try_from","try_into","type_id","Hasher","State","borrow","borrow_mut","clone","clone_into","default","deserialize","digest","finalize","fmt","from","into","len","measure","new","save_state","serialize","shrink_to_fit","state","states","to_owned","try_from","try_into","type_id","verify","CharDevice","Directory","Extra","FileType","HardLink","Index","Inode","RegularFile","SymLink","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","child_inode","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp_inodes","default","default","default","default","depth","deserialize","deserialize","deserialize","deserialize","extra","find","fmt","fmt","fmt","fmt","from","from","from","from","from_file","get_hard_link_target","gid","gname","hash_index","hasher","inodes","into","into","into","into","link","links","mode","mtime","name","new","num","num_children","offset","parent","path_eq","process","serialize","serialize","serialize","serialize","size","target_ino","to_file","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","typeflag","uid","uname","xattrs","Parser","PosixHeader","ascii_decimal_to_u64","ascii_octal_to_u64","borrow","borrow","borrow_mut","borrow_mut","buf","chksum","devmajor","devminor","extra","fmt","from","from","gid","gname","header","index","index","inode","into","into","linkname","magic","mode","mtime","name","new","offset","padding","parse","parse_gnu","parse_header","parse_item","parse_pax","prefix","reader","rsize","size","size","split_path","try_from","try_from","try_into","try_into","type_id","type_id","typeflag","uid","uname","version"],"q":["cc_fs","","","","cc_fs::fs","","","","","","","","","","","","","","","","","","","","","","","cc_fs::hash","","","","","","","","","","","","","","","","","","","","","","","","","","cc_fs::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cc_fs::tar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Fuse-based confidential container file-system backed by …","Provide sha256 digest computation using sha2 crate.","Representation of indexes of confidential container …","Parse and index tar files.","FUSE file system with integrity protection backed by a tar …","Maximum permitted length of a name.","Time to retain lookups for. Larger values result in faster …","","","Returns the argument unchanged.","Get the attributes of a given inode.","Index for the tar file.","Fetch FUSE attributes for an inode.","Calls <code>U::from(self)</code>.","Lookup a child with given name in the parent inode.","Mount a Confidential Container file-system.","Create a new CcFs instance backed by a tar file.","The next available file handle.","Open a given inode.","Read bytes from given inode.","Read the contents of a given directory.","Read a link.","Tar file backing store for the layer.","Map from CcFs FileType to FUSE FileType.","","","","Hasher computes the sha256 sum of a byte stream.","Intermediate state of sha256 computation. 256 bits. See …","","","","","","","Computed sha256 sum.","Finalize the sha256 computation.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Length of processed data.","Measure a given chunk of data.","Create a new Hasher instance.","Save the current state.","","Relinquish extra capacity.","Current state.","Set of saved intermediate states.","","","","","Verify the hash of a given chunk.","A character device.","A directory.","Infrequent properties of an item. Usually specified using …","Type of an item in the file-system.","Hard Link.","Index of a confidential container file-system.","Index node (Inode) of an item in file system.","A file. The <code>before</code> and <code>after</code> hash state of each page in …","Symbolic link to another item.","","","","","","","","","Inode number of first child.","","","","","","","","","Compare two inodes.","","","","","The nesting level of this inode.","","","","","Infrequently occuring properties.","Find inode with given path in a slice of inodes.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Read index from given file.","Recursively fetch the target of a hard link.","","","Index of starting hash state.","Hasher instance for integrity verification.","List of inodes.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Number of hard links to this inode.","","","Name of the item.","Create a new Index instance.","The inode number of this inode.","Number of (direct) children.","512-block offset of the file in the backing tar file. …","Path of the directory containing the item. The parent path …","Check whether the inode has given path.","Process index for use in mounting file-systems.","","","","","","Inode number of hard-link target.","Write the index to given file. Overwrites existing file.","","","","","","","","","","","","","","","","","File type.","","","","Parses a tar file and creates an index.","Tar header binary compatible with Posix specification. See …","Parse ascii decimal number. A trailing null indicates end …","Parse ascii octal number. A trailing null indicates end of …","","","","","Buffer for reading data.","Checksum of all the bytes in the header (with blank chksum …","Device major number. Octal.","Device minor number. Octal.","Extra properties of current inode.","","Returns the argument unchanged.","Returns the argument unchanged.","Owner group ID (octal).","Owner group name. Maximum 32 characters. Null terminated.","Current Posix tar header.","Create confidential container file-system index for given …","File-system index","The current Inode.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Target of a link. Maximum 100 characters.","Format indicator. E.g USTAR. Null terminated.","File mode (octal).","Last modification time in Unix time format (octal).","File name. Maximum 100 characters. Null terminated.","Create new instance of Parser.","Current offset within the tar file.","Padding for 512 byte alignment.","Parse the tar file and generate index.","Parse GNU LongLink and LongName headers.","Parse tar entry header. PAX and GNU overrides are …","Parse a tar item.","Parse pax extensions.","Filename prefix. 155 characters. Thus allowing maximum 255 …","Tar file reader with buffering. The contents of the file …","Size rounded up to 512 byte boundary.","Size of the current item.","File size in bytes (octal). Size is zero if the header …","Split a path into filename and directory.","","","","","","","Type of the file. Supported values are:","Owner user ID (octal).","Owner user name. Maximum 32 characters. Null terminated.","Format version number."],"i":[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,18,18,0,0,18,0,0,18,18,18,26,5,27,18,26,5,27,5,18,26,5,27,18,26,5,27,27,18,26,5,27,5,18,26,5,27,5,27,18,26,5,27,18,26,5,27,27,27,5,26,5,27,27,18,26,5,27,26,5,5,5,5,27,5,5,5,5,5,27,18,26,5,27,5,5,27,18,26,5,27,18,26,5,27,18,26,5,27,18,26,5,27,5,5,26,26,0,0,0,0,31,30,31,30,31,30,30,30,31,30,31,30,30,30,31,0,31,31,31,30,30,30,30,30,30,31,31,30,31,31,31,31,31,30,31,31,31,30,31,31,30,31,30,31,30,30,30,30,30],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[1,2,3,4]],0,[[3,5],6],[[]],[[1,2,3,7,8]],[[9,9,9],10],[[9,9],[[10,[1]]]],0,[[1,2,3,11,12]],[[1,2,3,3,13,14,11,[15,[3]],16]],[[1,2,3,3,13,17]],[[1,2,3,16]],0,[18,19],[[],20],[[],20],[[],21],0,0,[[]],[[]],[22,22],[[]],[[],22],[[],[[20,[22]]]],0,[22,[[10,[9]]]],[[22,23],24],[[]],[[]],0,[22,10],[14,[[10,[22]]]],[22,14],[22,20],[22],0,0,[[]],[[],20],[[],20],[[],21],[[22,14],[[10,[25]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[18,18],[26,26],[5,5],[27,27],[[]],[[]],[[]],[[]],[[5,5],28],[[],18],[[],26],[[],5],[[],27],0,[[],[[20,[18]]]],[[],[[20,[26]]]],[[],[[20,[5]]]],[[],[[20,[27]]]],0,[[27,9,29,29],[[10,[29]]]],[[18,23],24],[[26,23],24],[[5,23],24],[[27,23],24],[[]],[[]],[[]],[[]],[9,[[10,[27]]]],[[27,14],14],0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,[[14,14],[[10,[27]]]],0,0,0,0,[[5,9],25],[27,10],[18,20],[26,20],[5,20],[27,20],0,0,[[27,9],[[10,[3]]]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],0,0,0,0,0,0,[[],[[10,[3]]]],[[],[[10,[3]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[30,23],24],[[]],[[]],0,0,0,[[15,9],10],0,0,[[]],[[]],0,0,0,0,0,[9,[[10,[31]]]],0,0,[31,[[10,[27]]]],[[31,25],10],[31,10],[31,10],[31,10],0,0,0,0,0,[[],10],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],0,0,0,0],"p":[[3,"CcFs"],[3,"Request"],[15,"u64"],[3,"ReplyAttr"],[3,"Inode"],[3,"FileAttr"],[3,"OsStr"],[3,"ReplyEntry"],[3,"String"],[6,"Result"],[15,"i32"],[3,"ReplyOpen"],[15,"i64"],[15,"u32"],[4,"Option"],[3,"ReplyData"],[3,"ReplyDirectory"],[4,"FileType"],[4,"FileType"],[4,"Result"],[3,"TypeId"],[3,"Hasher"],[3,"Formatter"],[6,"Result"],[15,"bool"],[3,"Extra"],[3,"Index"],[4,"Ordering"],[15,"usize"],[3,"PosixHeader"],[3,"Parser"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
